Proposed changes (likely deferred to 6.0.0)

	string format and numbers library

	StrgetProtocol for >> operator

	do not co-mingle ptr and pid in fsys!

	fsys::exec with and without env will be merged

	stringlist [] and get are const

	resolve string cat operators

	string comparison operators become direct inlines to compare

	gaurd classes renamed

	add CharbufProtocol with locking states

	String operator + should return temp string...preset size of both

	Substring operator() inline, real substring() virtual so can be
	derived in UString for codepoints.

	Internal "StringTemp" class for str(..) functions with its own
	operator + that works as before, so we do not have to "double stack"
	temporary string objects when we concatenate expressions.

	shell::Option no longer needs OrderedObject base class

	shell::detach() static member and add exit code option!

	Use NSPR as an alternate thread runtime base like we do with GNU pth...
	Especially convenient with common use of NSS for future tls.  Do we
	still keep GNU pth option if we do this?

	Use NSPR code base for simulating msw conditional variables for direct
	native msw threading if better than code we have in ucommon, or maybe
	use NSPR in place of native msw threading entirely?

	Add NSS backend for secure alongside openssl & gnutls.

	SSLBuffer does not do validation and peer methods missing.  We should 
	load all ca certificates rather than depend on using a directory path
	for using multiple CA's because the latter depends on hash mapped
	directories for openssl and may not exist as a feature in gnutls.  

	Should we have a new generic ca archive format and ca management tool?

	Certificate paths should be exposed and changable.  Base-name of
	certificate service should be changable.

	PKI related functions in secure library.

	shell parser support for +options, auto collating of short options to
	remove duplicates.

	unicode shell options?

Rejected changes:

	DetachedThread delete this into dealloc() virtual...
		- use Thread::exit() virtual for this purpose instead

	in script engine make expression operands virtuals or expression
	operation itself virtual. - ccscript moved into bayonne, no longer
	needed if there, either.

	changed new operators confined to namespace for include file issues
	with std lib - build and compile issues if not global

	ssl socket low level methods and bio rather than just upper level stream.

	Add serialio and logging class? - rejected; in bayonne runtime

