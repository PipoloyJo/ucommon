Completed ABI changes (3.x to 4.0):

	Killed some FILE methods now that we have bufio

	Consolidate "Socket::puts" and inline splints for 4.0 abi cleanup.

	redo socket return int's like fsys to return errno() on error (this
	may not require abi change, as no linkage is effected...)

	add err() method and errno info everywhere needed for constency

	templates that return refs rather than pointers.

	string object no longer directly tied to read/write methods, fixes
	include requirements for string.

	protocols introduced as design concept.  character protocol allows
	parsing and conversion classes (such as unicode) to operate on more
	arbitrary objects.

	bufpager allows text to be stored into and retrieved from segmented
	storage allocated on demand.

	i/o buffering becomes buffer protocol

	Move ccaudio out of ucommon/focus on ucommon & secure runtime mission.

	A pipe stream/process pipe handler that uses the buffer protocol.

	tcpstream uses a char * address like TCPBuffer.

	Reduced use of "family" in address methods as often no longer needed.  The
	socket methods that use address lists now filter by the socket type.

Proposed ABI changes (3.1 or 4.0?):

	changed new operators confined to namespace for include file issues
	with std lib.

	unicode shell options?

	ssl socket low level methods rather than just upper level stream?

Proposed changes:

	Use NSPR as an alternate thread runtime base like we do with GNU pth...
	Especially convenient with common use of NSS for future tls.  Do we
	still keep GNU pth option if we do this?

	Use NSPR code base for simulating msw conditional variables for direct
	native msw threading if better than code we have in ucommon, or maybe
	use NSPR in place of native msw threading entirely?

	Add serialio and logging class?

	Add a "add" and "remove" method for keymap?

	Add NSS backend for secure alongside openssl & gnutls.

	SSLBuffer does not do validation and peer methods missing.  We should load
    all ca certificates rather than depend on using a directory path for using
    multiple CA's because the latter depends on hash mapped directories for
    openssl and may not exist as a feature in gnutls.  

	Should we have a new generic ca archive format and ca management tool?

	Certificate paths should be exposed and changable.  Base-name of
	certificate service should be changable.

	PKI related functions in secure library.

	shell parser support for +options, auto collating of short options to
	remove duplicates.

Rejected changes:

	DetachedThread delete this into dealloc() virtual...
		- use Thread::exit() virtual for this purpose instead

	in script engine make expression operands virtuals or expression
	operation itself virtual. - ccscript moved into bayonne


